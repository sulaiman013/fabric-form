{
  "name": "Workspace Provisioning Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fabric-provisioner",
        "options": {}
      },
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -1220,
        -200
      ],
      "webhookId": "fabric-auto-provision",
      "id": "a1de6a53-dbe7-4a0d-885c-a4ef08a2bb19",
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const input_data = items[0].json;\n\n// Extract 'body' if present\nconst body_data = input_data.body || {};\n\n// Extract all prerequisite fields\nconst prerequisites = body_data.Prerequisites || {};\nconst {\n    CapacityId,\n    UserId,\n    ClientId,\n    ClientSecret,\n    TenantId,\n    WebhookUrl,\n    OpenAIApiKey         // <-- Added this!\n} = prerequisites;\n\n// Default configuration\nconst default_config = {\n    workspaceName: body_data.WorkspaceName,\n    lakehouses: [],\n    warehouses: [],\n    prerequisites: {\n        CapacityId: CapacityId,\n        UserId: UserId,\n        ClientId: ClientId,\n        ClientSecret: ClientSecret,\n        TenantId: TenantId,\n        WebhookUrl: WebhookUrl,\n        OpenAIApiKey: OpenAIApiKey     // <-- Added this!\n    },\n    adminUsers: [],\n    adminGroups: [],\n    notebooks: body_data.notebooks || [],\n    autoCreateNotebooks: body_data.autoCreateNotebooks || false,\n    defaultNotebookCode: body_data.defaultNotebookCode || [\n        \"# Default medallion architecture notebook\",\n        \"from pyspark.sql.types import *\",\n        \"print('Medallion architecture notebook initialized')\",\n        \"# Add your bronze/silver/gold transformations here\"\n    ]\n};\n\n// Process Lakehouses\nconst lakehouses = (body_data.Lakehouses || []).map(lh => ({\n    name: lh.name,\n    tables: lh.tables || [],\n    attachedNotebook: lh.attachedNotebook || null,\n    enableSchemas: lh.enableSchemas || false,\n    schemas: lh.schemas || []\n}));\n\n// Process Warehouses\nconst warehouses = (body_data.Warehouses || []).map(wh => ({\n    name: wh.name,\n    caseInsensitive: wh.caseInsensitive || false,\n    schemas: wh.schemas || []\n}));\n\n// Process Notebooks\nconst notebooks = default_config.notebooks;\n\n// Remove duplicates for Lakehouses by 'name'\nconst unique_lakehouses = Object.values(\n    lakehouses.reduce((acc, curr) => {\n        acc[curr.name] = curr;\n        return acc;\n    }, {})\n);\n\n// Remove duplicates for Warehouses by 'name'\nconst unique_warehouses = Object.values(\n    warehouses.reduce((acc, curr) => {\n        acc[curr.name] = curr;\n        return acc;\n    }, {})\n);\n\n// Final configuration\nconst config = {\n    workspaceName: body_data.WorkspaceName || default_config.workspaceName,\n    lakehouses: unique_lakehouses,\n    warehouses: unique_warehouses,\n    notebooks: notebooks,\n    autoCreateNotebooks: body_data.autoCreateNotebooks !== undefined\n        ? body_data.autoCreateNotebooks\n        : default_config.autoCreateNotebooks,\n    prerequisites: {\n        CapacityId: CapacityId,\n        UserId: UserId,\n        ClientId: ClientId,\n        ClientSecret: ClientSecret,\n        TenantId: TenantId,\n        WebhookUrl: WebhookUrl,\n        OpenAIApiKey: OpenAIApiKey     // <-- Added this!\n    },\n    adminUsers: body_data.adminUsers || default_config.adminUsers,\n    adminGroups: body_data.adminGroups || default_config.adminGroups\n};\n\n// Debug logging (shows in N8N node logs)\nconsole.log('Processed configuration:');\nconsole.log('Lakehouses:', config.lakehouses.map(l => l.name));\nconsole.log('Warehouses:', config.warehouses.map(w => w.name));\nconsole.log('Notebooks:', config.notebooks.map(n => n.name ? n.name : n));\nconsole.log('Prerequisites:', config.prerequisites);\n\n// Return as N8N expects\nreturn [{ json: config }];"
      },
      "name": "Process Input Configuration",
      "type": "n8n-nodes-base.code",
      "position": [
        -1000,
        -195
      ],
      "id": "84c7c3af-51d0-4198-8062-4ebd776ac35a",
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://login.microsoftonline.com/{{ $json.prerequisites.TenantId }}/oauth2/v2.0/token",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "specifyBody": "string",
        "body": "=grant_type=client_credentials&client_id={{ $json.prerequisites.ClientId }}&client_secret={{ $json.prerequisites.ClientSecret }}&scope=https://api.fabric.microsoft.com/.default",
        "options": {}
      },
      "name": "Initial Auth",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -780,
        -195
      ],
      "id": "9f3ed07f-41cf-4e8d-8db5-0c66ef6d1112",
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.fabric.microsoft.com/v1/workspaces",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"displayName\": \"{{ $json.displayName }}\"\n}",
        "options": {}
      },
      "name": "Create Workspace",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        100,
        -60
      ],
      "id": "f1a767ab-a3ff-482f-8392-e638a21ea9b0",
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{$node['Create Workspace'].json['id']}}/assignToCapacity",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"capacityId\": \"{{ $('Process Input Configuration').item.json.prerequisites.CapacityId }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        -70
      ],
      "id": "6b76ce82-a926-4aee-896e-705386546f7f",
      "name": "Assign Capacity",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare role assignments for all admin users and groups\nconst config = $node['Process Input Configuration'].json;\nconst workspaceId = $node['Create Workspace'].json.id;\nconst roleAssignments = [];\n\n// Process admin users\nif (config.adminUsers && config.adminUsers.length > 0) {\n  config.adminUsers.forEach(userId => {\n    roleAssignments.push({\n      json: {\n        workspaceId,\n        principal: {\n          id: userId,\n          type: 'User'\n        },\n        role: 'Admin'\n      }\n    });\n  });\n}\n\n// Process admin groups\nif (config.adminGroups && config.adminGroups.length > 0) {\n  config.adminGroups.forEach(groupId => {\n    roleAssignments.push({\n      json: {\n        workspaceId,\n        principal: {\n          id: groupId,\n          type: 'Group'\n        },\n        role: 'Admin'\n      }\n    });\n  });\n}\n\n// If no admins specified, use default\nif (roleAssignments.length === 0) {\n  roleAssignments.push({\n    json: {\n      workspaceId,\n      principal: {\n        id: $('Process Input Configuration').first().json.prerequisites.UserId,\n        type: 'User'\n      },\n      role: 'Admin'\n    }\n  });\n}\n\nreturn roleAssignments;"
      },
      "name": "Prepare Role Assignments",
      "type": "n8n-nodes-base.code",
      "position": [
        540,
        -70
      ],
      "id": "94991553-fa4d-4086-a929-c64d46eabbc7",
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{$json.workspaceId}}/roleAssignments",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"principal\": {\n    \"id\": \"{{ $json.principal.id }}\",\n    \"type\": \"{{ $json.principal.type }}\"\n  },\n  \"role\": \"{{ $json.role }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        760,
        -70
      ],
      "id": "8f8f87ab-056f-4ed8-b7be-59eb86b493d5",
      "name": "Assign Workspace Roles",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare lakehouse data for sequential processing\nconst config = $node['Process Input Configuration'].json;\nconst workspaceId = $input.first().json.workspaceId \n  || $node[\"Create Workspace\"].json.id \n  || null;\n\n// Create output for each lakehouse individually\nconst lakehouseOutputs = [];\n\nif (config.lakehouses && config.lakehouses.length > 0) {\n  // Create an output item for each lakehouse\n  config.lakehouses.forEach((lakehouse, index) => {\n    lakehouseOutputs.push({\n      json: {\n        workspaceId: workspaceId,\n        lakehouse: lakehouse,\n        lakehouseIndex: index,\n        totalLakehouses: config.lakehouses.length,\n        isLastLakehouse: index === config.lakehouses.length - 1\n      }\n    });\n  });\n  return lakehouseOutputs;\n} else {\n  return [{\n    json: {\n      hasLakehouses: false,\n      message: 'No lakehouses to create',\n      workspaceId: workspaceId\n    }\n  }];\n}"
      },
      "name": "Prepare Lakehouses",
      "type": "n8n-nodes-base.code",
      "position": [
        980,
        -100
      ],
      "id": "be3ca8f4-694e-4495-a20c-a6cfa3ef564c",
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "name": "Split Into Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1200,
        -95
      ],
      "id": "f4eac5bc-f9ad-4f13-8d6c-1b9e81ee264f",
      "typeVersion": 3
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://login.microsoftonline.com/{{ $('Process Input Configuration').item.json.prerequisites.TenantId }}/oauth2/v2.0/token",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "specifyBody": "string",
        "body": "=grant_type=client_credentials&client_id={{ $('Process Input Configuration').item.json.prerequisites.ClientId }}&client_secret={{ $('Process Input Configuration').item.json.prerequisites.ClientSecret }}&scope=https://api.fabric.microsoft.com/.default",
        "options": {}
      },
      "name": "Generate Token for Lakehouse",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1460,
        -80
      ],
      "id": "52dbc571-6090-4ed3-8f61-2162aab033bd",
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $('Prepare Lakehouses').item.json.workspaceId }}/lakehouses",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"displayName\": \"{{ $('Split Into Batches').item.json.lakehouse.name }}\"\n}",
        "options": {}
      },
      "name": "Create Lakehouse",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1680,
        -80
      ],
      "id": "cc26a781-d1f2-4978-af96-d08b8017653a",
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Add a delay to avoid rate limiting\nawait new Promise(resolve => setTimeout(resolve, 1000));\n\n// Pass through the lakehouse data with creation result\nconst lakehouseData = $node['Split Into Batches'].json;\nconst creationResult = $input.first().json;\n\nreturn [{\n  json: {\n    ...lakehouseData,\n    lakehouseId: creationResult.id || null,\n    creationStatus: creationResult.id ? 'success' : 'failed',\n    error: creationResult.error || null\n  }\n}];"
      },
      "name": "Process Result",
      "type": "n8n-nodes-base.code",
      "position": [
        1980,
        -80
      ],
      "id": "c22157ed-526c-4b16-9044-113e2a94f217",
      "typeVersion": 2
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "name": "Aggregate Results",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        1420,
        -340
      ],
      "id": "b7958599-80e0-4216-9c78-2dd2642fffe5",
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Store lakehouse results and prepare for warehouse creation\nconst aggregatedData = $input.first().json;\nconst config = $node['Process Input Configuration'].json;\nconst workspaceId = $input.first().json.data[0].workspaceId;\n\n// Store lakehouse results\nconst lakehouseResults = {\n  workspaceId: workspaceId,\n  workspaceName: config.workspaceName,\n  createdLakehouses: aggregatedData.createdLakehouses || [],\n  totalLakehouses: aggregatedData.totalProcessed || 0\n};\n\n// Pass configuration and results to warehouse creation\nreturn [{\n  json: {\n    ...lakehouseResults,\n    config: config,\n    proceedToWarehouses: config.warehouses && config.warehouses.length > 0\n  }\n}];"
      },
      "name": "Store Lakehouse Results",
      "type": "n8n-nodes-base.code",
      "position": [
        1640,
        -345
      ],
      "id": "2acaaa2a-09c3-4cbb-abbf-aaae1f3b124a",
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Assume this node is receiving multiple items (array of warehouses from IF2)\nconst inputItems = $input.all();\n\n// Extract base data from the first item for shared values\nconst firstItem = inputItems[0].json;\nconst workspaceId = firstItem.workspaceId || firstItem.lakehouseResults?.workspaceId || '';\nconst config = firstItem.lakehouseResults?.config || {};\nconst lakehouseResults = firstItem.lakehouseResults || {};\n\nconst warehouseOutputs = inputItems.map((item, index) => {\n  return {\n    json: {\n      workspaceId,\n      warehouse: item.json.warehouse,\n      warehouseIndex: index,\n      totalWarehouses: inputItems.length,\n      isLastWarehouse: index === inputItems.length - 1,\n      lakehouseResults,\n      status: item.json.status,\n      existingWarehouseId: item.json.existingWarehouseId\n    }\n  };\n});\n\n// Fallback if no warehouses found\nif (warehouseOutputs.length === 0) {\n  return [{\n    json: {\n      hasWarehouses: false,\n      message: 'No warehouses to create',\n      workspaceId,\n      lakehouseResults\n    }\n  }];\n}\n\nreturn warehouseOutputs;\n"
      },
      "name": "Prepare Warehouses",
      "type": "n8n-nodes-base.code",
      "position": [
        2520,
        -460
      ],
      "id": "73b535bb-91b5-4258-9751-277d8342e3e9",
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Split Into Batches - Warehouses",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        2740,
        -470
      ],
      "id": "c0c3bc96-bdd9-4097-b811-54f23d4c1954",
      "typeVersion": 3
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://login.microsoftonline.com/{{ $('Process Input Configuration').item.json.prerequisites.TenantId }}/oauth2/v2.0/token",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "specifyBody": "string",
        "body": "=grant_type=client_credentials&client_id={{ $('Process Input Configuration').item.json.prerequisites.ClientId }}&client_secret={{ $('Process Input Configuration').item.json.prerequisites.ClientSecret }}&scope=https://api.fabric.microsoft.com/.default",
        "options": {}
      },
      "name": "Generate Token for Warehouse",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2960,
        -620
      ],
      "id": "6a24d194-b96a-4287-a1c2-f18ee647ee5e",
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $('Store Lakehouse Results').item.json.workspaceId }}/warehouses",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"displayName\": \"{{ $('Split Into Batches - Warehouses').item.json.warehouse.name }}\"\n}",
        "options": {}
      },
      "name": "Create Warehouse",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3180,
        -620
      ],
      "id": "239006f0-8d2f-4f26-9176-ea0de2002037",
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Add a delay to avoid rate limiting\nawait new Promise(resolve => setTimeout(resolve, 1000));\n\n// Pass through the warehouse data with creation result\nconst warehouseData = $node['Split Into Batches - Warehouses'].json;\nconst creationResult = $input.first().json;\n\nreturn [{\n  json: {\n    ...warehouseData,\n    warehouseId: creationResult.id || null,\n    creationStatus: creationResult.id ? 'success' : 'failed',\n    error: creationResult.error || null\n  }\n}];"
      },
      "name": "Process Warehouse Result",
      "type": "n8n-nodes-base.code",
      "position": [
        3480,
        -620
      ],
      "id": "12930cb3-60bd-404b-a472-bd36f7e8cfa2",
      "typeVersion": 2
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "name": "Aggregate Warehouse Results",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        3660,
        -240
      ],
      "id": "a304abbf-7747-4c8c-9958-5c385ba95e74",
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Compile final response with both lakehouse and warehouse results\nconst warehouseData = $input.first().json;\nconst lakehouseResults = warehouseData.lakehouseResults || {};\nconst config = $node['Process Input Configuration'].json;\n\n// Extract created warehouses\nconst createdWarehouses = [];\nif (Array.isArray(warehouseData)) {\n  warehouseData.forEach(item => {\n    if (item.warehouseId) {\n      createdWarehouses.push({\n        name: item.warehouse.name,\n        id: item.warehouseId,\n        status: item.creationStatus\n      });\n    }\n  });\n}\n\nreturn [{\n  json: {\n    success: true,\n    workspaceId: lakehouseResults.workspaceId,\n    workspaceName: config.workspaceName,\n    createdLakehouses: lakehouseResults.createdLakehouses || [],\n    totalLakehouses: lakehouseResults.totalLakehouses || 0,\n    createdWarehouses: createdWarehouses,\n    totalWarehouses: config.warehouses ? config.warehouses.length : 0,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Final Response",
      "type": "n8n-nodes-base.code",
      "position": [
        3860,
        -240
      ],
      "id": "53a9af59-83de-4519-bd56-0f1fe09dc491",
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "=https://api.fabric.microsoft.com/v1/workspaces",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {}
      },
      "name": "Check Existing Workspace",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -560,
        -195
      ],
      "id": "8b88b29c-7bed-4f10-843f-a784eeee7ace",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const workspaces = $input.first().json.value;\nconst targetName = $node[\"Process Input Configuration\"].json.workspaceName;\n\nconst match = workspaces.find(ws => ws.displayName === targetName);\n\nif (match) {\n  return [{ json: { id: match.id, displayName: match.displayName, status: 'exists' } }];\n} else {\n  return [{ json: { displayName: targetName, status: 'create' } }];\n}\n"
      },
      "name": "Workspace Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -340,
        -200
      ],
      "id": "99b270e1-5b44-4cb1-bcb9-03f5451a5866"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6b7f021f-28ed-4696-a9eb-6c31b5f074b0",
              "leftValue": "={{ $json.status }}",
              "rightValue": "exists",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -120,
        -195
      ],
      "id": "b356440d-b26a-450d-af57-e90deded211e",
      "name": "If"
    },
    {
      "parameters": {
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $json.workspaceId }}/lakehouses",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        -345
      ],
      "id": "05f80748-631f-47e7-a2b1-09d10ba6ca62",
      "name": "Lakehouse Check",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// List of existing lakehouses (from Lakehouse Check)\nconst existingLakehouses = $input.first().json.value || [];\n\n// Get workspaceId from the first lakehouse (assuming all belong to same workspace)\nconst workspaceId = existingLakehouses[0]?.workspaceId || $('Workspace ID').first().json.workspaceId;\n\n// List of lakehouses to create (from Process Input Configuration)\nconst inputLakehouses = $node[\"Process Input Configuration\"].json.lakehouses;\n\n// Result array\nconst results = inputLakehouses.map(lh => {\n  const match = existingLakehouses.find(existing => existing.displayName === lh.name);\n  return {\n    json: {\n      workspaceId,\n      lakehouse: lh,\n      lakehouseName: lh.name,\n      status: match ? 'exists' : 'create',\n      existingLakehouseId: match ? match.id : null\n    }\n  };\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        -340
      ],
      "id": "cb2b0ca4-817a-489c-97fc-51068c93e3a8",
      "name": "Lakehouse status"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "dbdca4b3-55da-4e3c-8da1-548957b0a0d3",
              "leftValue": "={{ $json.status }}",
              "rightValue": "=exists",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        760,
        -340
      ],
      "id": "86392d89-0e70-48e8-b940-63b4385c8536",
      "name": "If1"
    },
    {
      "parameters": {
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $json.workspaceId }}/warehouses",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1860,
        -345
      ],
      "id": "a31ec38a-f7b3-46bf-897e-fb5addf8c81a",
      "name": "Warehouse Check",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// List of existing warehouses from the API response\nconst existingWarehouses = $input.first().json.value || [];\n\n// Get workspaceId from the first match (they all belong to same workspace)\nconst workspaceId = existingWarehouses[0]?.workspaceId || $('Store Lakehouse Results').first().json.workspaceId;\n\n// List of warehouses requested in config\nconst inputWarehouses = $node[\"Process Input Configuration\"].json.warehouses;\n\n// Compare each warehouse in config against what's already in Fabric\nconst results = inputWarehouses.map(wh => {\n  const match = existingWarehouses.find(existing => existing.displayName === wh.name);\n  return {\n    json: {\n      workspaceId,\n      warehouse: wh,\n      warehouseName: wh.name,\n      status: match ? 'exists' : 'create',\n      existingWarehouseId: match ? match.id : null\n    }\n  };\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2080,
        -340
      ],
      "id": "da7dd1ac-1c01-4e15-8d6f-96c551845201",
      "name": "Warehouse status"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e59dfadc-07a4-4b36-9b1f-ebcf9d3b59fe",
              "leftValue": "={{ $json.status }}",
              "rightValue": "exists",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2300,
        -340
      ],
      "id": "d8a6367f-fe23-40cb-bf3d-64f48dce2cfc",
      "name": "If2"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n\n// This assumes your input looks like:\n// { id: \"343aa280-bc00-49f1-97b8-f05da4f289da\", displayName: \"N8N_Workflows\", status: \"exists\" }\n\nreturn [{\n  json: {\n    workspaceId: input.id,\n    workspaceName: input.displayName,\n    status: input.status\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        100,
        -340
      ],
      "id": "7005f3f4-ddb3-4a2d-91ae-a6140483f05c",
      "name": "Workspace ID"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $('Workspace Info').item.json.id }}/notebooks",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"displayName\": \"{{ $('Notebooks to Create').item.json.notebookName }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5340,
        60
      ],
      "id": "e9396e72-5828-4cf4-a3f4-a14920f27c46",
      "name": "Notebook Creation",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $json.id }}/items",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4260,
        -240
      ],
      "id": "a37cb134-a325-4eed-a1b9-abaa25026e14",
      "name": "Necessary Items",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $('Aggregate Warehouse Results').item.json.data[0].workspaceId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4060,
        -240
      ],
      "id": "d16ea502-6f46-4ff8-b73d-22faa999dbed",
      "name": "Workspace Info",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $('Workspace Info').item.json.id }}/items/{{ $('Loop Over Items').item.json.notebookId }}/updateDefinition\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"definition\": {\n    \"format\": \"ipynb\",\n    \"parts\": [\n      {\n        \"path\": \"notebook-content.ipynb\",\n        \"payload\": \"{{ $node['Generate Notebook Definition'].json.encodedContent }}\",\n        \"payloadType\": \"InlineBase64\"\n      }\n    ]\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        8440,
        -220
      ],
      "id": "c79f324d-987c-4756-84c2-872dca7a68cb",
      "name": "Update Notebook Definition",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1. Grab the raw LLM output (including the ```python ... ``` fences)\nconst llmText = $input.first().json.choices[0].message.content;\n\n// 2. Strip out any ```python and closing ``` fences\n//    This leaves you with the exact multiline text (including all \"\\n\")\nlet code = llmText.replace(/```python/g, '').replace(/```/g, '').trim();\n\n// 3. (Optional) If you want to debug, uncomment the next line:\n//    console.log(\"Raw code with newlines:\\n\", code);\n\n// 4. Pull in any contextual IDs you need\nconst lhObj                 = $('Loop Over Items').first().json || {};\nconst default_lakehouse_id   = lhObj.lakehouseId   || \"\";\nconst default_lakehouse_name = lhObj.lakehouseName || \"\";\nconst workspace_id           = $('Workspace Info').first()?.json?.id || \"\";\n\n// 5. Build the notebook JSON – note `source` is now a single multiline string\nconst notebookContent = {\n  nbformat: 4,\n  nbformat_minor: 5,\n  metadata: {\n    language_info: { name: \"python\" },\n    dependencies: {\n      lakehouse: {\n        default_lakehouse: default_lakehouse_id,\n        default_lakehouse_name: default_lakehouse_name,\n        default_lakehouse_workspace_id: workspace_id\n      }\n    },\n    description: \"Notebook updated via API with default Lakehouse attachment\"\n  },\n  cells: [\n    {\n      cell_type: \"code\",\n      metadata: {},\n      // <-- Use the single string `code` here so that all \"\\n\" are preserved\n      source: [code],\n      outputs: [],\n      execution_count: null\n    }\n  ]\n};\n\n// 6. Base64‐encode the JSON payload\nconst encodedContent = Buffer\n  .from(JSON.stringify(notebookContent))\n  .toString(\"base64\");\n\n// 7. Return as an array (n8n expects an array of JSON-return objects)\nreturn [\n  {\n    json: {\n      encodedContent\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        7920,
        -220
      ],
      "id": "280557b0-6e26-42f4-931a-b9ea00932697",
      "name": "Generate Notebook Definition"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $('Mapped LH').item.json.workspaceId }}/items/{{ $('Mapped LH').item.json.notebookId }}/jobs/instances?jobType=RunNotebook",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"executionData\": {\n    \"parameters\": {},\n    \"configuration\": {}\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        8920,
        -220
      ],
      "id": "c5f1e8af-bfac-4ea2-ba90-0ed7e69cb2d3",
      "name": "Execute Notebook",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Fetch input data\nconst configInput = $node[\"Process Input Configuration\"].json;\nconst existingItems = $node[\"Necessary Items\"].json.value;\n\n// Extract notebook names from lakehouses\nconst neededNotebooks = configInput.lakehouses\n  .map(lh => lh.attachedNotebook)\n  .filter(nb => !!nb);\n\n// Existing notebooks in workspace\nconst existingNotebooks = existingItems\n  .filter(item => item.type === 'Notebook')\n  .map(item => item.displayName);\n\n// Determine status for each notebook\nconst notebookStatuses = neededNotebooks.map(name => ({\n  notebookName: name,\n  status: existingNotebooks.includes(name) ? 'exists' : 'create'\n}));\n\n// Return as a single object under json\nreturn notebookStatuses.map(status => ({ json: status }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4480,
        -240
      ],
      "id": "4dd4f4b6-1f72-4150-b54c-4cbf93a89004",
      "name": "Notebooks to Create"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "de99b0f5-5612-4322-8b3c-4df191370476",
              "leftValue": "={{ $json.status }}",
              "rightValue": "exists",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4700,
        -240
      ],
      "id": "719d4ff1-f091-4586-8674-0658bc48cb78",
      "name": "If3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://login.microsoftonline.com/{{ $('Process Input Configuration').item.json.prerequisites.TenantId }}/oauth2/v2.0/token",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "specifyBody": "string",
        "body": "=grant_type=client_credentials&client_id={{ $('Process Input Configuration').item.json.prerequisites.ClientId }}&client_secret={{ $('Process Input Configuration').item.json.prerequisites.ClientSecret }}&scope=https://api.fabric.microsoft.com/.default",
        "options": {}
      },
      "name": "Generate Token for Notebook",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        5080,
        60
      ],
      "id": "e4842807-8866-4a3d-b4f1-ea01d57c6f84",
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Add a delay to avoid rate limiting\nawait new Promise(resolve => setTimeout(resolve, 1000));\n\n// Pass through the warehouse data with creation result\nconst warehouseData = $node['Loop Over Items - Notebook'].json;\nconst creationResult = $input.first().json;\n\nreturn [{\n  json: {\n    ...warehouseData,\n    notebookId: creationResult.id || null,\n    creationStatus: creationResult.id ? 'success' : 'failed',\n    error: creationResult.error || null\n  }\n}];"
      },
      "name": "Process Notebook Result",
      "type": "n8n-nodes-base.code",
      "position": [
        5540,
        60
      ],
      "id": "1080f341-0d79-46ab-8364-24287dbb8a07",
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        4820,
        60
      ],
      "id": "bdbb4328-cce4-41ef-8586-c890d572c4e9",
      "name": "Loop Over Items - Notebook"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "name": "Aggregate Notebook Results",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        5760,
        -240
      ],
      "id": "ee7fae6b-2db3-4d08-bdca-a62285c596cd",
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Inputs: (change the $node names as per your workflow)\nconst processConfig = $node[\"Process Input Configuration\"].json;\nconst notebookResults = $node[\"Necessary Items1\"].json.value;\nconst necessaryItems = $node[\"Necessary Items\"].json.value;\nconst workspaceId = $('Workspace Info').first().json.id;\n\n// Get OpenAI API key from prerequisites\nconst openAIApiKey = processConfig.prerequisites && processConfig.prerequisites.OpenAIApiKey \n    ? processConfig.prerequisites.OpenAIApiKey \n    : null;\n\n// Build a map for notebookName -> notebookId\nconst notebookIdMap = {};\nfor (const item of notebookResults) {\n  if (item.type === \"Notebook\") {\n    notebookIdMap[item.displayName] = item.id;\n  }\n}\n\n// Build a map for lakehouseName -> lakehouseId (from Necessary Items)\nconst lakehouseIdMap = {};\nfor (const item of necessaryItems) {\n  if (item.type === \"Lakehouse\") {\n    lakehouseIdMap[item.displayName] = item.id;\n  }\n}\n\n// For each lakehouse, map with attached notebook (if any), include tables\nconst output = processConfig.lakehouses.map(lh => {\n  let attachedNotebook = lh.attachedNotebook || null;\n  let notebookId = attachedNotebook ? notebookIdMap[attachedNotebook] || null : null;\n  let lakehouseId = lakehouseIdMap[lh.name] || null;\n  return {\n    lakehouseName: lh.name,\n    lakehouseId,\n    workspaceId,               \n    attachedNotebook,\n    notebookId,\n    tables: lh.tables || [],\n    openAIApiKey               // Include the OpenAI API key\n  };\n});\n\n// Keep only items with a non-null notebookId and tables array that is not empty\nconst filteredOutput = output.filter(item =>\n  item.notebookId &&\n  Array.isArray(item.tables) &&\n  item.tables.length > 0\n);\n\n// Output for N8N (each object in array needs to be under json key)\nreturn filteredOutput.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6480,
        -240
      ],
      "id": "639b01ad-6390-485d-98ac-216765e89d9c",
      "name": "Mapped LH"
    },
    {
      "parameters": {
        "url": "=https://api.fabric.microsoft.com/v1/workspaces/{{ $('Workspace Info').item.json.id }}/items",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5980,
        -240
      ],
      "id": "128a9d95-e312-4158-ab16-052e209754c0",
      "name": "Necessary Items1",
      "credentials": {
        "httpBearerAuth": {
          "id": "kYhWdaZxNwxPD1bH",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        6840,
        -240
      ],
      "id": "e001ff86-aa66-41fa-a2bf-28d582590456",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://login.microsoftonline.com/{{ $('Process Input Configuration').item.json.prerequisites.TenantId }}/oauth2/v2.0/token",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "specifyBody": "string",
        "body": "=grant_type=client_credentials&client_id={{ $('Process Input Configuration').item.json.prerequisites.ClientId }}&client_secret={{ $('Process Input Configuration').item.json.prerequisites.ClientSecret }}&scope=https://api.fabric.microsoft.com/.default",
        "options": {}
      },
      "name": "Generate Token for Notebook1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        8680,
        -220
      ],
      "id": "37f9e110-3608-4f77-b200-5df50ecabb34",
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "efb0f5cd-a2ec-4d9b-af60-501db83d2354",
              "name": "openAI",
              "value": "={{ $json.openAIApiKey }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        7160,
        -220
      ],
      "id": "199b19d3-af4d-44ee-84d9-5f5aa8f15c2d",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Authorization\": \"Bearer {{ $json.openAI }}\",\n  \"Content-Type\": \"application/json\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4.1-mini\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": {{ JSON.stringify(\n        \"I need you to create me a fabric pyspark code to create the given table json structure in the lakehouse (\" +\n        $(\"Loop Over Items\").item.json.lakehouseName +\n        \") that is attached with the notebook.\\n\\n\" +\n        \"If the table structure is nothing, then return nothing.\\n\\n\" +\n        \"I only and I repeat again I only need the code.\\n\\n\" +\n        \"Also you have to be very consistent.\\n\" +\n        \"for example, I will attach you a code to create a table and save it in the lakehouse\\n\\n\" +\n        \"\\\"\\\"\\\"\\n\" +\n        \"from pyspark.sql import SparkSession\\n\" +\n        \"from pyspark.sql.types import StructType, StructField, StringType, FloatType, IntegerType\\n\" +\n        \"import json\\n\\n\" +\n        \"table_structure_json = '''\\n\" +\n        \"[\\n\" +\n        \"  {\\n\" +\n        \"    \\\"name\\\": \\\"Orders\\\",\\n\" +\n        \"    \\\"columns\\\": [\\n\" +\n        \"      {\\n\" +\n        \"        \\\"name\\\": \\\"OrderID\\\",\\n\" +\n        \"        \\\"dataType\\\": \\\"varchar\\\"\\n\" +\n        \"      },\\n\" +\n        \"      {\\n\" +\n        \"        \\\"name\\\": \\\"Date\\\",\\n\" +\n        \"        \\\"dataType\\\": \\\"varchar\\\"\\n\" +\n        \"      },\\n\" +\n        \"      {\\n\" +\n        \"        \\\"name\\\": \\\"Amount\\\",\\n\" +\n        \"        \\\"dataType\\\": \\\"float\\\"\\n\" +\n        \"      },\\n\" +\n        \"      {\\n\" +\n        \"        \\\"name\\\": \\\"Quantity\\\",\\n\" +\n        \"        \\\"dataType\\\": \\\"int\\\"\\n\" +\n        \"      }\\n\" +\n        \"    ]\\n\" +\n        \"  }\\n\" +\n        \"]\\n\" +\n        \"'''\\n\\n\" +\n        \"def create_table_from_structure(table_structure_json):\\n\" +\n        \"    tables = json.loads(table_structure_json)\\n\" +\n        \"    if not tables:\\n\" +\n        \"        return\\n\\n\" +\n        \"    spark = SparkSession.builder.getOrCreate()\\n\\n\" +\n        \"    for table in tables:\\n\" +\n        \"        table_name = table.get(\\\"name\\\")\\n\" +\n        \"        columns = table.get(\\\"columns\\\", [])\\n\" +\n        \"        if not columns:\\n\" +\n        \"            continue\\n\\n\" +\n        \"        # Map JSON data types to Spark data types\\n\" +\n        \"        dtype_map = {\\n\" +\n        \"            \\\"varchar\\\": StringType(),\\n\" +\n        \"            \\\"float\\\": FloatType(),\\n\" +\n        \"            \\\"int\\\": IntegerType()\\n\" +\n        \"        }\\n\\n\" +\n        \"        fields = []\\n\" +\n        \"        for col in columns:\\n\" +\n        \"            col_name = col.get(\\\"name\\\")\\n\" +\n        \"            col_type = col.get(\\\"dataType\\\")\\n\" +\n        \"            spark_type = dtype_map.get(col_type.lower())\\n\" +\n        \"            if spark_type:\\n\" +\n        \"                fields.append(StructField(col_name, spark_type, True))\\n\\n\" +\n        \"        schema = StructType(fields)\\n\" +\n        \"        # Create empty DataFrame with the schema\\n\" +\n        \"        df = spark.createDataFrame([], schema)\\n\\n\" +\n        \"        # Write as Delta table to the specified lakehouse\\n\" +\n        \"        df.write.format(\\\"delta\\\").mode(\\\"overwrite\\\").saveAsTable(f\\\"SalesLH.{table_name}\\\")\\n\\n\" +\n        \"create_table_from_structure(table_structure_json)\\n\" +\n        \"\\\"\\\"\\\"\\n\\n\" +\n        \"Table structure:\\n\" +\n        JSON.stringify($(\"Loop Over Items\").item.json.tables[0], null, 2)\n      ) }}\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7500,
        -220
      ],
      "id": "896f4f3f-79ab-465c-ae1c-a9cbc898c155",
      "name": "GPT Output"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Input Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Input Configuration": {
      "main": [
        [
          {
            "node": "Initial Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial Auth": {
      "main": [
        [
          {
            "node": "Check Existing Workspace",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Workspace": {
      "main": [
        [
          {
            "node": "Assign Capacity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assign Capacity": {
      "main": [
        [
          {
            "node": "Prepare Role Assignments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Role Assignments": {
      "main": [
        [
          {
            "node": "Assign Workspace Roles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assign Workspace Roles": {
      "main": [
        [
          {
            "node": "Prepare Lakehouses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Lakehouses": {
      "main": [
        [
          {
            "node": "Split Into Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Batches": {
      "main": [
        [
          {
            "node": "Aggregate Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Token for Lakehouse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Token for Lakehouse": {
      "main": [
        [
          {
            "node": "Create Lakehouse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Lakehouse": {
      "main": [
        [
          {
            "node": "Process Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Result": {
      "main": [
        [
          {
            "node": "Split Into Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Results": {
      "main": [
        [
          {
            "node": "Store Lakehouse Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Lakehouse Results": {
      "main": [
        [
          {
            "node": "Warehouse Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Warehouses": {
      "main": [
        [
          {
            "node": "Split Into Batches - Warehouses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Batches - Warehouses": {
      "main": [
        [
          {
            "node": "Aggregate Warehouse Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Token for Warehouse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Token for Warehouse": {
      "main": [
        [
          {
            "node": "Create Warehouse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Warehouse": {
      "main": [
        [
          {
            "node": "Process Warehouse Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Warehouse Result": {
      "main": [
        [
          {
            "node": "Split Into Batches - Warehouses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Warehouse Results": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing Workspace": {
      "main": [
        [
          {
            "node": "Workspace Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workspace Status": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Workspace ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Workspace",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lakehouse Check": {
      "main": [
        [
          {
            "node": "Lakehouse status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lakehouse status": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Aggregate Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Lakehouses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Warehouse Check": {
      "main": [
        [
          {
            "node": "Warehouse status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Warehouse status": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Aggregate Warehouse Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Warehouses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workspace ID": {
      "main": [
        [
          {
            "node": "Lakehouse Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Response": {
      "main": [
        [
          {
            "node": "Workspace Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notebook Creation": {
      "main": [
        [
          {
            "node": "Process Notebook Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Necessary Items": {
      "main": [
        [
          {
            "node": "Notebooks to Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workspace Info": {
      "main": [
        [
          {
            "node": "Necessary Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Notebook Definition": {
      "main": [
        [
          {
            "node": "Update Notebook Definition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Notebook Definition": {
      "main": [
        [
          {
            "node": "Generate Token for Notebook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notebooks to Create": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Aggregate Notebook Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items - Notebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Token for Notebook": {
      "main": [
        [
          {
            "node": "Notebook Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items - Notebook": {
      "main": [
        [
          {
            "node": "Aggregate Notebook Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Token for Notebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Notebook Result": {
      "main": [
        [
          {
            "node": "Loop Over Items - Notebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Notebook Results": {
      "main": [
        [
          {
            "node": "Necessary Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapped LH": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Necessary Items1": {
      "main": [
        [
          {
            "node": "Mapped LH",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Token for Notebook1": {
      "main": [
        [
          {
            "node": "Execute Notebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Notebook": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "GPT Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT Output": {
      "main": [
        [
          {
            "node": "Generate Notebook Definition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2c0d1c30-f428-4842-b72a-3155ae7d27e0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a9e2cf5f87412c403faa99bd64296127257a83dfdc4d43132d83af0f66cf7eb1"
  },
  "id": "R8WuH2JPkSuIt9OY",
  "tags": []
}